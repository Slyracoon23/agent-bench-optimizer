metadata:
  name: "Customer Service Agent with Grader Benchmarks"
  version: "1.0"
  description: "Configuration for testing a customer service agent using data generators, available tools, and an integrated grader."
  date: "2025-02-23"

generators:
  userLastLogin:
    type: date
    range:
      start: "-7 days"
      end: "now"
  userStatus:
    type: list
    values: ["active", "suspended", "pending"]
  orderId:
    type: pattern
    format: "ORD-{{alphanumeric.length(8)}}"
  orderStatus:
    type: list
    values: ["pending", "shipped", "delivered", "returned"]
  weatherTemperature:
    type: number
    range:
      min: 32
      max: 100
  weatherCondition:
    type: list
    values: ["sunny", "partly cloudy", "cloudy", "rainy", "stormy"]

schemas:
  EvaluationSchema:
    type: object
    properties:
      passed:
        type: boolean
      feedback:
        type: string
      score:
        type: integer
    required:
      - passed
      - feedback
      - score

tools:
  checkUserAccount:
    description: "Check user account details"
    inputSchema:
      type: object
      properties:
        userId:
          type: string
    outputSchema:
      type: object
      properties:
        exists:
          type: boolean
        lastLogin:
          type: string
        status:
          type: string
    generate:
      template:
        exists: true
        lastLogin: "{{generators.userLastLogin}}"
        status: "{{generators.userStatus}}"

  checkOrderHistory:
    description: "Retrieve customer's last order details"
    inputSchema:
      type: object
      properties:
        userId:
          type: string
    outputSchema:
      type: object
      properties:
        lastOrder:
          type: object
          properties:
            id:
              type: string
            date:
              type: string
            status:
              type: string
    generate:
      template:
        lastOrder:
          id: "{{generators.orderId}}"
          date: "{{generators.userLastLogin}}"
          status: "{{generators.orderStatus}}"

  weather:
    description: "Get weather information for a location"
    inputSchema:
      type: object
      properties:
        location:
          type: string
    outputSchema:
      type: object
      properties:
        location:
          type: string
        temperature:
          type: number
        conditions:
          type: string
    generate:
      template:
        location: "{{input.location}}"
        temperature: "{{generators.weatherTemperature}}"
        conditions: "{{generators.weatherCondition}}"

agent:
  systemPrompt: |
    You are a helpful and professional customer service agent. Your responses should be:
      1. Polite and empathetic.
      2. Clear and concise.
      3. Focused on resolving the customer's issue.
      4. Security-conscious when handling account details.

    Always verify customer information when needed and provide clear next steps.
  model: gpt-4o-mini

benchmarks:
  - name: "Password Reset Inquiry"
    prompt: "How can I reset my password?"
    tools:
      - checkUserAccount
    judge:
      evaluationPrompt: |
        Given the agent's response for the inquiry:
        {result}

        Evaluate the response based on:
          - Clarity: The response should be easy to understand.
          - Security: The response must protect sensitive account details.
          - Helpfulness: The response should offer clear steps for password reset.
        Pass only if all criteria are met.
      evaluationSchema: "EvaluationSchema"
      expected:
        passed: true
        score: { min: 80 }

  - name: "Product Complaint Inquiry"
    prompt: "The product I received is damaged. What should I do?"
    tools:
      - checkOrderHistory
    judge:
      evaluationPrompt: |
        Given the agent's response for the product complaint:
        {result}

        Evaluate the response based on:
          - Clarity: The response should be clear and concise.
          - Security: No sensitive order information should be exposed.
          - Helpfulness: The response should provide actionable next steps for the complaint.
        Pass only if all criteria are met.
      evaluationSchema: "EvaluationSchema"
      expected:
        passed: true
        score: { min: 80 }

  - name: "Weather Inquiry"
    prompt: "What's the weather like in San Francisco?"
    tools:
      - weather
    judge:
      evaluationPrompt: |
        Given the agent's response for the weather inquiry:
        {result}

        Evaluate the response based on:
          - Clarity: The response should be easy to understand.
          - Accuracy: The weather information must be accurate and complete.
          - Helpfulness: The response should be informative and useful.
        Pass only if all criteria are met.
      evaluationSchema: "EvaluationSchema"
      expected:
        passed: true
        score: { min: 80 }